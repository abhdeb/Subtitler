/*
 * Copyright (c) 2012. Subtitler Renaissance V1.0
 * Renaissance is very simple application to allow search and download subtitles for chosen video and specified language.
 * Copyright (c) Spiral Research 2005-2012(abhra.dev@gmail.com)
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package subtitlergui;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * @author abhdeb
 */
public class DVDCoverPreview extends javax.swing.JFrame implements SubtitlerConstants {

    /**
     * Creates new form DVDCoverPreviewer
     */
    public DVDCoverPreview(URL imageUrl) {
        initComponents(imageUrl);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(URL imageUrl) {

        setIconImage(new ImageIcon(getClass().getResource("/images/image.png")).getImage());

        jPanel1 = new javax.swing.JPanel();
        jPanel1.setBorder(DSB);
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        if (null != imgFile && imgFile.exists()) {
            jLabel1.setIcon(new ImageIcon(imgFile.getPath()));
        }
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane2.setViewportView(jLabel1);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button_download.png"))); // NOI18N
        jButton1.setText("Download");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button_print.png"))); // NOI18N
        jButton2.setText("Download All");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        //jButton2.setEnabled(false);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button_quit.png"))); // NOI18N
        jButton3.setText("Quit");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button_previous.png"))); // NOI18N
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/button_next.png"))); // NOI18N
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 442, Short.MAX_VALUE)
                                        .addComponent(jButton3))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton5))
                                .addComponent(jScrollPane2))
                        .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton4)
                                .addComponent(jButton5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton1)
                                .addComponent(jButton2)
                                .addComponent(jButton3))
                        .addGap(9, 9, 9))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
        );
        SubtitlerUtil.setCenterScreen(this, 538, 732);
        pack();
    }

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {
        if (currentPosition > 0 && null != DvdCover.dvdCoverList && !DvdCover.dvdCoverList.isEmpty()) {
            currentPosition = (currentPosition - 1);
            DVDCoverDTO dvdCoverDTO = (DVDCoverDTO) DvdCover.dvdCoverList.get(currentPosition);
            imgFile = new File(dvdCoverDTO.getLocalMainFilePath());
            if (null != imgFile && imgFile.exists()) {
                setTitle("Subtitler Image Preview - " + imgFile.getName());
                try {
                    previewImage = ImageIO.read(imgFile);
                    jLabel1.setIcon(new ImageIcon(imgFile.getPath()));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {
        if (currentPosition < (DvdCover.dvdCoverList.size() - 1) && null != DvdCover.dvdCoverList && !DvdCover.dvdCoverList.isEmpty()) {
            currentPosition = (currentPosition + 1);
            DVDCoverDTO dvdCoverDTO = (DVDCoverDTO) DvdCover.dvdCoverList.get(currentPosition);
            imgFile = new File(dvdCoverDTO.getLocalMainFilePath());
            if (null != imgFile && imgFile.exists()) {
                setTitle("Subtitler Image Preview - " + imgFile.getName());
                try {
                    previewImage = ImageIO.read(imgFile);
                    jLabel1.setIcon(new ImageIcon(imgFile.getPath()));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {
        new Thread(new Runnable() {
            public void run() {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setMultiSelectionEnabled(false);
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                int returnVal = fileChooser.showSaveDialog(DVDCoverPreview.this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    final File file = fileChooser.getSelectedFile();
                    if (!file.exists()) {
                        file.mkdirs();
                    }
                    if (file.exists() && file.isDirectory() && file.canWrite()) {
                        if (null != previewImage && null != imgFile && imgFile.exists()) {
                            File saveFile = new File(file.getPath() + "\\" + imgFile.getName());
                            String ext = imgFile.getName();
                            if (null != ext && ext.indexOf(".") != -1) {
                                ext = ext.substring(ext.indexOf(".") + 1, ext.length());
                                try {
                                    ImageIO.write(previewImage, ext, saveFile);
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    }
                }
            }
        }).start();
    }

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {

        new Thread(new Runnable() {
            public void run() {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setMultiSelectionEnabled(false);
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                int returnVal = fileChooser.showSaveDialog(DVDCoverPreview.this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    final File file = fileChooser.getSelectedFile();
                    if (!file.exists()) {
                        file.mkdirs();
                    }
                    if (file.exists() && file.isDirectory() && file.canWrite()) {
                        if (null != DvdCover.dvdCoverList && !DvdCover.dvdCoverList.isEmpty()) {
                            for (int i = 0; i < DvdCover.dvdCoverList.size(); i++) {
                                DVDCoverDTO dvdCoverDTO = (DVDCoverDTO) DvdCover.dvdCoverList.get(i);
                                imgFile = new File(dvdCoverDTO.getLocalMainFilePath());
                                if (null != imgFile && imgFile.exists()) {
                                    try {
                                        previewImage = ImageIO.read(imgFile);
                                        if (null != previewImage && null != imgFile && imgFile.exists()) {
                                            File saveFile = new File(file.getPath() + "\\" + imgFile.getName());
                                            String ext = imgFile.getName();
                                            if (null != ext && ext.indexOf(".") != -1) {
                                                ext = ext.substring(ext.indexOf(".") + 1, ext.length());
                                                try {
                                                    ImageIO.write(previewImage, ext, saveFile);
                                                } catch (IOException e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                        }
                                    } catch (IOException e) {
                                        e.printStackTrace();
                                    }
                                }

                            }
                        }
                    }
                }
            }
        }).start();
    }

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {
        dispose();
    }

    public static void main(String args[]) throws MalformedURLException {
        final URL imageUrl = new URL("file:///C:/Development/SubtitlerGUI/SubtitlerGUI/out/production/SubtitlerGUI/tmpImages/Transit_1.jpg");
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DVDCoverPreview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DVDCoverPreview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DVDCoverPreview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DVDCoverPreview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DVDCoverPreview(imageUrl).setVisible(true);
            }
        });
    }

    public void setImage(URL imageUrl) {
        if (null != imageUrl) {
            setTitle("Subtitler Image Preview");
            String imgPath = imageUrl.getPath();
            try {
                imgPath = SubtitlerUtil.deocdeURL(imgPath);
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            if (imgPath.indexOf("_Preview") != -1) {
                imgPath = imgPath.replace("_Preview", "");
            }
            imgFile = new File(imgPath);
            if (null != imgFile && imgFile.exists()) {
                setTitle("Subtitler Image Preview - " + imgFile.getName());
                try {
                    previewImage = ImageIO.read(imgFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (null != DvdCover.dvdCoverList && !DvdCover.dvdCoverList.isEmpty()) {
                    for (int i = 0; i < DvdCover.dvdCoverList.size(); i++) {
                        DVDCoverDTO dvdCoverDTO = (DVDCoverDTO) DvdCover.dvdCoverList.get(i);
                        if (dvdCoverDTO.getLocalMainFilePath().equalsIgnoreCase(imgFile.getPath())) {
                            currentPosition = i;
                            break;
                        }
                    }
                }
            }
        }
        if (null != imgFile && imgFile.exists()) {
            jLabel1.setIcon(new ImageIcon(imgFile.getPath()));
        }
    }

    public void setLookFeel(String lookAndFeel) throws ClassNotFoundException, UnsupportedLookAndFeelException, IllegalAccessException, InstantiationException {
        if (null != lookAndFeel) {
            if ("Nimbus".equalsIgnoreCase(lookAndFeel)) {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } else if ("Metal".equalsIgnoreCase(lookAndFeel)) {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Metal".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }

            } else if ("CDE/Motif".equalsIgnoreCase(lookAndFeel)) {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("CDE/Motif".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }

            } else {
                javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            }
        } else {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
    }

    public static void start(final URL imageUrl, String lookAndFeel) throws ClassNotFoundException, UnsupportedLookAndFeelException, IllegalAccessException, InstantiationException {
        if (null != lookAndFeel) {
            if ("Nimbus".equalsIgnoreCase(lookAndFeel)) {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } else if ("Metal".equalsIgnoreCase(lookAndFeel)) {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Metal".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }

            } else if ("CDE/Motif".equalsIgnoreCase(lookAndFeel)) {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("CDE/Motif".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }

            } else {
                javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            }
        } else {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DVDCoverPreview dvdCoverPreview = new DVDCoverPreview(imageUrl);
                dvdCoverPreview.setVisible(true);
                SwingUtilities.updateComponentTreeUI(dvdCoverPreview);
            }
        });
    }

    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private File imgFile = null;
    private int currentPosition = -1;
    private BufferedImage previewImage = null;
}
